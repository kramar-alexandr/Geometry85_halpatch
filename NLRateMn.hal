external function Integer GetIntYc(Date);
external procedure CheckFlush(var Integer,Integer);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroCurncyNomTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,val,LongInt,Boolean,string,string,string,Integer);
external procedure GetAccBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,Integer,var val);
external function Boolean GetObjBal(string,string,var record ObjBalVc);
external updating procedure SaveTrans(record TRVc);
external procedure TRSumup(var record TRVc,var val);
external procedure MockObjFromVATCode(string,var string);
external function Boolean AccInRange(string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

updating procedure SaveNLRateTrans(Date d1,record TRVc gTRp,LongInt nrseries,var Integer flushcnt)
BEGIN
  Integer rwcnt;
  val v;
  
  rwcnt = MatRowCnt(gTRp);
  if (rwcnt>0) then begin
    if (nonblankdate(d1)) then begin
      gTRp.TransDate = d1;
    end else begin
      gTRp.TransDate = CurrentDate;
    end;
    gTRp.IntYc = GetIntYc(gTRp.TransDate);
    gTRp.RegDate = CurrentDate;
    gTRp.Number = NextSerNr("TRVc",gTRp.TransDate,nrseries,false,"");
    TRSumup(gTRp,v);
    SaveTrans(gTRp);
    CheckFlush(flushcnt,10);
    RecordNew(gTRp);
  end;
  RETURN;
END;

updating procedure NLRateMnOld(record RcVc RepSpec)
BEGIN
  Integer rwcnt;
  val Bb,Cb,Db,Diff,Diff2;
  val fr,to1,to2,br1,br2;
  record AccVc Accr;
  Boolean Vws;
  Boolean testf;
  string 255 RU,tstr;
  record ObjBalVc ObjBalr;
  record ObjBalVc CurObjBalr;
  Boolean Objbals;
  Boolean CurObjbals;
  record NLRateBlock nlrate;
  val DiffSum;
  val totsum,d,bv;
  val temp,baserate1,baserate2;
  string 20 curncy;
  record TRVc gTRp;
  Date nild;
  record BaseCurBlock bascur;
  Integer flushcnt;
  
  bv = blankval;
  BlockLoad(bascur);
  BlockLoad(nlrate);
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  GetFullCurncyRate(curncy,RepSpec.d1,temp,temp,temp,baserate1,baserate2);
  RecordNew(gTRp);
  Accr.AccNumber = "";
  Vws = true;
  while (LoopMain(Accr,1,Vws)) begin
    testf = true;
    if (nonblank(RepSpec.AccStr)) then begin
      if (AccInRange(Accr.AccNumber,RepSpec.AccStr)==false) then begin
        testf = false;
        goto L77;
      end;
    end;
    if (Accr.GroupAcc!=0) then begin goto L77; end;
    if (blank(Accr.Curncy)) then begin goto L77; end;
    if (Accr.Curncy==bascur.BaseCur1) then begin goto L77; end;
    if (Accr.Curncy==bascur.BaseCur2) then begin goto L77; end;
    if (Accr.AccType>=3) then begin goto L77; end;
    MockObjFromVATCode(Accr.Curncy,RU);
    Objbals = GetObjBal(Accr.AccNumber,"",ObjBalr);
    CurObjbals = GetObjBal(Accr.AccNumber,RU,CurObjBalr);
    if ((Accr.AccType==0) or (Accr.AccType==1) or (Accr.AccType==2)) then begin
      GetAccBalance(Accr.AccNumber,"",RepSpec.d1,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,0,Bb);
      GetAccBalance(Accr.AccNumber,"",RepSpec.d1,CurObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,2,RepSpec.CurncyCode,0,Cb);
    end;
    if (testf) then begin
      GetFullCurncyRate(Accr.Curncy,RepSpec.d1,fr,to1,to2,br1,br2);
      Db = MulRateToBase1(Accr.Curncy,Cb,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      Diff = Db - Bb;
      if (nlrate.Limit!=0) then begin          
        d = Diff;
        if (d<0) then begin d = -d; end;
        if (d<nlrate.Limit) then begin goto L40; end;
      end;
      DiffSum = DiffSum + Diff;        
      rwcnt = MatRowCnt(gTRp);
      if (rwcnt>=199) then begin
        SaveNLRateTrans(RepSpec.d1,gTRp,-1,flushcnt);
      end;
      if (Diff>=0) then begin
        AddEuroCurncyNomTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,Diff,false,true,totsum, Accr.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,bv,-1,false,"","","",0);
        if (GetAccName(nlrate.RateGainAcc,tstr,60)==false) then begin goto L40; end;
        AddEuroTrRow(gTRp,nlrate.RateGainAcc,"","",tstr,Diff,baserate1,baserate2,false,false,totsum,false,"","","");
      end else begin
        Diff = -Diff;
        AddEuroCurncyNomTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,Diff,false,false,totsum,Accr.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,bv,-1,false,"","","",0);
        if (GetAccName(nlrate.RateLossAcc,tstr,60)==false) then begin goto L40; end;
        AddEuroTrRow(gTRp,nlrate.RateLossAcc,"","",tstr,Diff,baserate1,baserate2,false,true,totsum,false,"","","");
      end;
L40:;
    end;
L77:;
    UserTrace(Accr.AccNumber,M4Code);            
  end;  
  SaveNLRateTrans(RepSpec.d1,gTRp,-1,flushcnt);
  RETURN;
END;

updating procedure FindAccountRateDiffrence(string accnumber,Integer type,string basecur1,string basecur2,Date d1,val limit,LongInt nrseries,var record TRVc gTRp,var record TRVc grevTRp,var Integer flushcnt,
                                            string RateGainAcc,string RateLossAcc,val baserate1,val baserate2,Boolean basecur2f)
BEGIN
  Boolean TrHs,testf;
  record MainVc Mainr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Integer trcnt;  
  val fr,to1,to2,br1,br2;
  val curv,basev,basevd1,d,diff,diff2;
  record AccVc Accr;
  val totsum,bv;
  string 255 tstr;
  Date td,nild;
  record BaseCurBlock bascur;
// Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 4 December 2019 11:46:42
	  array val sumdiff,sumdiff2;// Edit ************************** Tuesday, 11 February 2014 10:12:39
  array string 5 acur;
  integer cui,curw;// Edit ************************** Tuesday, 11 February 2014 10:12:40
  boolean cufind;// Edit ************************** Tuesday, 11 February 2014 10:13:54
  record FBVc FBr;
  row FBVc FBrw;
  
  

	// Edit End ---------------------------------------------- Edit End
	  BlockLoad(bascur);
  
// Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 4 December 2019 11:46:49
	  curw = 0;
  
  FBr.TransDate = "";
  TrHs = true;
  while(loopkey("TransSerNr",FBr,1,TrHs))begin
  	testf = true;
  	if(FBr.TransDate>d1)then begin TrHs = false; end;
  	
  	if(TrHs and FBr.SimFlag==0)then begin
  		rwcnt = matrowcnt(FBr);
  		For(i=0;i<rwcnt;i=i+1) begin
	  		matrowget(FBr,i,FBrw);
	  		if(accnumber==FBrw.AccNumber)then begin
	  			if (basecur2f==false) then begin
						if (FBrw.CurncyCode==basecur1) then begin testf = false; end;
						if (FBrw.CurncyCode==basecur2) then begin testf = false; end;
					end;
	  			if(testf)then begin
	  				curv = FBrw.CurDebVal - FBrw.CurCredVal;
						if (curv==0) then begin
							if (basecur2f) then begin
								curv = FBrw.Deb2Val - FBrw.Cred2Val;
							end;
						end;
						basev = FBrw.DebVal - FBrw.CredVal;
						if (curv!=0 or (FBrw.CurncyCode!=bascur.BaseCur1 and FBrw.CurncyCode!=bascur.BaseCur1))then begin
							GetFullCurncyRate(FBrw.CurncyCode,d1,fr,to1,to2,br1,br2);
							basevd1 = MulRateToBase1(FBrw.CurncyCode,curv,fr,to1,to2,br1,br2,DefaultCurRoundOff);
							diff = basev - basevd1;
							if (diff>=0) then begin
								diff2 = MulRateToBase2(bascur.BaseCur1,diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
								cufind = false;
								For(cui=0;cui<curw;cui=cui+1) begin
									if(acur[cui]==FBrw.CurncyCode)then begin
										cufind = true;
										sumdiff[cui] = sumdiff[cui] + diff;
										sumdiff2[cui] = sumdiff2[cui] + diff2;
									end;
								end;
								if(cufind==false)then begin
									acur[curw] = FBrw.CurncyCode;
									sumdiff[curw] = sumdiff[curw] + diff;
									sumdiff2[curw] = sumdiff2[curw] + diff2;
									curw = curw + 1;
								end;
							end else begin
								diff = -diff;
								diff2 = MulRateToBase2(bascur.BaseCur1,diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
								cufind = false;
								For(cui=0;cui<curw;cui=cui+1) begin
									if(acur[cui]==FBrw.CurncyCode)then begin
										cufind = true;
										sumdiff[cui] = sumdiff[cui] - diff;
										sumdiff2[cui] = sumdiff2[cui] - diff2;
									end;
								end;
								if(cufind==false)then begin
									acur[curw] = FBrw.CurncyCode;
									sumdiff[curw] = sumdiff[curw] - diff;
									sumdiff2[curw] = sumdiff2[curw] - diff2;
									curw = curw + 1;
								end;
							end;
						end;
	  			end;
	  		end;
			end; 
  	end;
  end;
  

	// Edit End ---------------------------------------------- Edit End
	  Mainr.AccNumber = accnumber;
  TrHs = true;
  while (LoopMain(Mainr,1,TrHs)) begin
    if (Mainr.AccNumber!=accnumber or Mainr.TransDate>d1) then begin TrHs = false; end;// Edit ************************** Monday, 10 February 2014 18:13:39
    if (TrHs) then begin
      TRr.Number = Mainr.TransNr;
      TRr.IntYc = Mainr.IntYc;
      if (ReadFirstMain(TRr,2,true)) then begin
      	//logtext(0,TRr.Number & TRr.IntYc  & "	" & TRr.Comment);
        rwcnt = MatRowCnt(TRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TRr,i,TRrw);
          if ((TRrw.ovst==0) and (TRrw.stp==1)) then begin
            testf = true;
            if (TRrw.AccNumber!=accnumber) then begin testf = false; end;
            if (basecur2f==false) then begin
              if (TRrw.Curncy==basecur1) then begin testf = false; end;
              if (TRrw.Curncy==basecur2) then begin testf = false; end;
            end;
            if (testf) then begin
              curv = TRrw.CurDebVal - TRrw.CurCredVal;
              if (curv==0) then begin
                if (basecur2f) then begin
                  curv = TRrw.DebVal2 - TRrw.CredVal2;
                end;
              end;
              basev = TRrw.DebVal - TRrw.CredVal;
              if (curv!=0 or (TRrw.Curncy!=bascur.BaseCur1 and TRrw.Curncy!=bascur.BaseCur1)) then begin// Edit ************************** Monday, 10 February 2014 18:15:52
                GetFullCurncyRate(TRrw.Curncy,d1,fr,to1,to2,br1,br2);
                basevd1 = MulRateToBase1(TRrw.Curncy,curv,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                diff = basev - basevd1;
                
                if (diff!=0) then begin
                  Accr.AccNumber = accnumber;
                  if (ReadFirstMain(Accr,1,true)) then begin
                    if (diff>=0) then begin
                      diff2 = MulRateToBase2(bascur.BaseCur1,diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
											cufind = false;
											For(cui=0;cui<curw;cui=cui+1) begin
	  										if(acur[cui]==TRrw.Curncy)then begin
	  											cufind = true;
	  											sumdiff[cui] = sumdiff[cui] + diff;
	  											sumdiff2[cui] = sumdiff2[cui] + diff2;
	  										end;
											end;
											if(cufind==false)then begin
												acur[curw] = TRrw.Curncy;
												sumdiff[curw] = sumdiff[curw] + diff;
												sumdiff2[curw] = sumdiff2[curw] + diff2;
												curw = curw + 1;
											end;
                    end else begin
                      diff = -diff;
                      diff2 = MulRateToBase2(bascur.BaseCur1,diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
                      cufind = false;
											For(cui=0;cui<curw;cui=cui+1) begin
	  										if(acur[cui]==TRrw.Curncy)then begin
	  											cufind = true;
	  											sumdiff[cui] = sumdiff[cui] - diff;
	  											sumdiff2[cui] = sumdiff2[cui] - diff2;
	  										end;
											end;
											if(cufind==false)then begin
												acur[curw] = TRrw.Curncy;
												sumdiff[curw] = sumdiff[curw] - diff;
												sumdiff2[curw] = sumdiff2[curw] - diff2;
												curw = curw + 1;
											end;
                    end;
                  end;
                end;

              end;
            end;
          end;
LSKIPROW:;          
        end;
      end;
    end;
  end;
// Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 4 December 2019 11:47:32
	  
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin
		if(curw>0)then begin
			For(cui=0;cui<curw;cui=cui+1) begin
				if(sumdiff[cui]!=0)then begin
					if(sumdiff[cui]>=0)then begin
						AddEuroCurncyNomARTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,sumdiff[cui],sumdiff2[cui],true,false,totsum,acur[cui],bv,bv,bv,baserate1,baserate2,0,bv,"",-1,0,bv,nild,-1,false,"","","");
						if (GetAccName(RateLossAcc,tstr,60)) then begin
							AddEuroTrRow(gTRp,RateLossAcc,"","",tstr,sumdiff[cui],baserate1,baserate2,true,true,totsum,false,"","","");
						end;
					end else begin
						sumdiff[cui] = -sumdiff[cui];
						sumdiff2[cui] = -sumdiff2[cui];
						AddEuroCurncyNomARTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,sumdiff[cui],sumdiff2[cui],true,true,totsum,acur[cui],bv,bv,bv,baserate1,baserate2,0,bv,"",-1,0,bv,nild,-1,false,"","","");
						if (GetAccName(RateGainAcc,tstr,60)) then begin
							AddEuroTrRow(gTRp,RateGainAcc,"","",tstr,sumdiff[cui],baserate1,baserate2,true,false,totsum,false,"","","");
						end;
					end;
				end;
			end; 
		end;
  end;

	// Edit End ---------------------------------------------- Edit End
	  RETURN;
END;

updating procedure NLRate(record RcVc RepSpec)
BEGIN
  record NLRateBlock nlrate;
  record BaseCurBlock bascur;
  val temp,baserate1,baserate2;
  Boolean TrHs;
  record NLRateVc NLRater;
  row NLRateVc NLRaterw;
  Integer i,rwcnt;
  Integer flushcnt;
  string 10 frcc,tocc;
  string 10 RateGainAcc,RateLossAcc;
  string 20 curncy;
  record TRVc gTRp;
  record TRVc grevTRp;
  Date td;

  RecordNew(gTRp);
  RecordNew(grevTRp);
  BlockLoad(nlrate);
  BlockLoad(bascur);
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  GetFullCurncyRate(curncy,RepSpec.d1,temp,temp,temp,baserate1,baserate2);
  frcc = FirstInRange(RepSpec.f1,10);
  tocc = LastInRange(RepSpec.f1,10);
  NLRater.Code = frcc;
  TrHs = true;
  while (LoopMain(NLRater,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin 
      if (NLRater.Code>tocc) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RateGainAcc = NLRater.RateGainAcc;
      if (blank(RateGainAcc)) then begin RateGainAcc = nlrate.RateGainAcc; end;
      RateLossAcc = NLRater.RateLossAcc;
      if (blank(RateLossAcc)) then begin RateLossAcc = nlrate.RateLossAcc; end;
      rwcnt = MatRowCnt(NLRater);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(NLRater,i,NLRaterw);
        FindAccountRateDiffrence(NLRaterw.AccNumber,NLRaterw.Type,bascur.BaseCur1,bascur.BaseCur2,RepSpec.d1,NLRater.Limit,NLRater.NrSeries,gTRp,grevTRp,flushcnt,RateGainAcc,RateLossAcc,baserate1,baserate2,RepSpec.flags[0]!=0);
      end;
    end;
  end;
  SaveNLRateTrans(RepSpec.d1,gTRp,NLRater.NrSeries,flushcnt);
  td = RepSpec.d1;
  td.month = td.month + 1;
  td.day = 1;
  SaveNLRateTrans(td,grevTRp,NLRater.NrSeries,flushcnt);
  RETURN;
END;

global
updating procedure NLRateMn(record RcVc RepSpec)
BEGIN
  if (CountRecords("NLRateVc")>0) then begin
    NLRate(RepSpec);
  end else begin
    NLRateMnOld(RepSpec);
  end;
  RETURN;
END;
