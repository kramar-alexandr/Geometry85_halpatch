//<halrule>server-only</halrule>
external updating procedure SetLinkedRecordApprovalStatus(record ActVc);
external updating function Boolean CreateNextLevelApprovalTasks(var record ActVc,record ActSeqVc,var record ActVc);
external function string 60 RemoveObjectFromObjectList(string,string);
external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
external function Time AddTime3(Time,LongInt);
external function LongInt TimeToSeconds2(Time);
external function Time AddTime2(Time,LongInt);
external function LongInt TimeDiffInSeconds(Time,Time);
external updating procedure OKLinkedRecord_ActVc(record ActVc);
external function Boolean AcceptanceTasksForCurrentLevelDone(string,string,string,string,string,row AcceptanceRulesVc,var Integer);
external updating procedure CreateAcceptanceAlert(string,string,string,val,string,string,record AcceptanceRulesVc,row AcceptanceRulesVc,string,string);
external updating procedure SetLinkedRecordAcceptanceStatus(record ActVc);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure TBIVCalcInCurValues(var record TBIVVc);
external procedure TBIVGetRate(var record TBIVVc);
external procedure CalcExtra(val,string,var val);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure CalcInCurtoTBIV(var record TBIVVc);
external function LongInt TimeToMinutes(Time);
external function string 255 FindINObjects(string,string);
external function Boolean PasteItemInSVO(var record SVOVc,Integer);
external procedure GetPRName(string, var string);
external updating procedure UpdateActPErs(record ActVc);
external function Boolean PasteCUInSVO(var record SVOVc,string,var string);
external function Boolean SVO_PasterSerialNr(var record SVOVc,Integer,var string);
external function Integer GetItemType(LongInt,LongInt,string,Integer);
external function Integer GetItemTypeGroup(string,var string);
external procedure GetPRInvSep(string,var Integer,var Integer);
external procedure GetPRItemCost(string,string,string,string,Integer,var val);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure ExtractObj(string,var Integer,var string);
external function LongInt AddTime(Time,LongInt,var Time);
external function Boolean GenActProjTrans(string);
external function Boolean GenActWSTrans(string);
external function Integer GetItemCost(string,string,string,val,val,var val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
                                                
/*
updating function Boolean CreateNextLevelAcceptanceTasks(record ActVc oldActr,record ActSeqVc ActSeqr,var record ActVc newActr)
begin
  Boolean res;
  Boolean nextlevelf;
  record POVc POr;
  record VIVc VIr;
  record IVVc IVr;
  record SDVc SDr;
  record TBBUVc TBBUr;
  record QTVc QTr;
  record ORVc ORr;
  record IntORVc IntORr;
  record ExpVc Expr;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  val bc1v;
  string 255 mainpersons,filename;
  Integer acceptanceregister;
  string 100 custcode;// Edit ************************** Tuesday, 15 January 2013 14:01:04
    
  acceptanceregister = -1;
  switch (oldActr.FromFileName) begin
    case "POVc": 
      POr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(POr,1,true)) then begin
        acceptanceregister = kAcceptancePO;      
        mainpersons = POr.SalesMan;
        custcode = POr.VECode;// Edit ************************** Tuesday, 15 January 2013 14:01:02
        bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);           
      end;
    case "VIVc": 
      VIr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(VIr,1,true)) then begin
        acceptanceregister = kAcceptanceVI;      
        mainpersons = VIr.SalesMan;
        custcode = VIr.VECode;// Edit ************************** Tuesday, 15 January 2013 14:01:02
        bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);        
      end;
    case "SDVc": 
   
    case "TBBUVc": 
      TBBUr.PRCode = oldActr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        acceptanceregister = kAcceptanceTBBU;      
        mainpersons = TBBUr.SalesMan;
        bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);        
      end;
    case "IVVc": 
      IVr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(IVr,1,true)) then begin
        mainpersons = IVr.SalesMan;
        switch (IVr.InvType) begin
          case kInvoiceTypeCash:
            acceptanceregister = kAcceptanceCashIV;
          case kInvoiceTypeCredit:
            acceptanceregister = kAcceptanceCredIV;
          otherwise
            acceptanceregister = kAcceptanceIV;
        end;
        bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);        
      end;
    case "QTVc": 
      QTr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(QTr,1,true)) then begin
        mainpersons = QTr.SalesMan;
        acceptanceregister = kAcceptanceQT;
        custcode = QTr.CustCode;// Edit ************************** Tuesday, 15 January 2013 14:01:02
        bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
      end;
    case "ORVc": 
      ORr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(ORr,1,true)) then begin
        mainpersons = ORr.SalesMan;
        acceptanceregister = kAcceptanceOR;
        bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
       end;
    case "ExpVc": 
      Expr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(Expr,1,true)) then begin
        mainpersons = Expr.Person;
        acceptanceregister = kAcceptanceExp;
        bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
      end;
    case "IntORVc": 
      IntORr.SerNr = StringToLongInt(oldActr.FromSerNr);
      if (ReadFirstMain(IntORr,1,true)) then begin
        mainpersons = IntORr.OurUser;
        acceptanceregister = kAcceptanceIntOR;
        bc1v = IntORr.Total;
      end;
  end;
  
  if (acceptanceregister<0) then begin
    goto LCreateNextLevelAcceptanceTasks;
  end;
	
	
	
  Acptr.Register = acceptanceregister;
  Acptr.CustCode = custcode;// Edit ************************** Tuesday, 15 January 2013 14:13:00
  
  if (!ReadFirstMain(Acptr,2,true)) then begin
  		Acptr.Register = acceptanceregister;
  		Acptr.CustCode = "";
  end;
  resetloop(Acptr);
  if (ReadFirstMain(Acptr,2,true)) then begin// Edit ************************** Tuesday, 15 January 2013 14:13:01
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (SetInSet(oldActr.MainPersons,Acptrw.AcceptanceBy)) then begin
        if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
          switch (Acptrw.NextLevel) begin
            case kAcceptanceNextLevelNone:
              nextlevelf = false;
              res = !AcceptanceTasksForCurrentLevelDone(oldActr.FromFileName,oldActr.FromSerNr,Acptr.AcceptanceActType,Acptrw);
              goto LCreateNextLevelAcceptanceTasks;
            case kAcceptanceNextLevelRequired:
              switch (Acptrw.ActionType) begin
                case kAcceptanceTypeActionByOne:
                  nextlevelf = true;
                // Edit Start ---------------------------------------------- Edit Start
								//Tuesday, 15 January 2013 14:31:02
                  if(oldActr.ActResult==Acptr.RejectedActType)then begin
                  		nextlevelf = false;
                  		res = false;
                  end;
								// Edit End ---------------------------------------------- Edit End
                case kAcceptanceTypeActionByAll:
                  nextlevelf = AcceptanceTasksForCurrentLevelDone(oldActr.FromFileName,oldActr.FromSerNr,Acptr.AcceptanceActType,Acptrw);
                  // Edit Start ---------------------------------------------- Edit Start
									//Tuesday, 15 January 2013 14:31:02
                  if(oldActr.ActResult==Acptr.RejectedActType)then begin
                  		nextlevelf = false;
                  		res = false;
                  end;
									// Edit End ---------------------------------------------- Edit End	
                  res = true;
              end;
              goto LNextLevelAcceptance;
          end;
        end;
      end;
      if (nextlevelf) then begin
        if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
          res = true;
          switch (oldActr.FromFileName) begin
            case "POVc": 
              CreateAcceptanceAlert("POVc",POr.SerNr,POr.SalesMan,POr.Sum4,POr.CurncyCode,POr.VECode,Acptr,Acptrw);
            case "VIVc": 
              CreateAcceptanceAlert("VIVc",VIr.SerNr,VIr.Sign,VIr.PayVal,VIr.CurncyCode,VIr.VECode,Acptr,Acptrw);
            case "SDVc": 
//              CreateAcceptanceAlert_SDVc(SDr,Acptr,Acptrw);
            case "TBBUVc": 
              CreateAcceptanceAlert("TBBUVc",TBBUr.PRCode,TBBUr.SalesMan,TBBUr.TotSum,TBBUr.CurncyCode,TBBUr.PRCode,Acptr,Acptrw);
            case "IVVc": 
              CreateAcceptanceAlert("IVVc",IVr.SerNr,IVr.SalesMan,IVr.Sum4,IVr.CurncyCode,IVr.CustCode,Acptr,Acptrw);
            case "QTVc": 
              CreateAcceptanceAlert("QTVc",QTr.SerNr,QTr.SalesMan,QTr.Sum4,QTr.CurncyCode,QTr.CustCode,Acptr,Acptrw);
            case "ORVc": 
              CreateAcceptanceAlert("ORVc",ORr.SerNr,ORr.SalesMan,ORr.Sum4,ORr.CurncyCode,ORr.CustCode,Acptr,Acptrw);
            case "ExpVc": 
              CreateAcceptanceAlert("ExpVc",Expr.SerNr,Expr.Person,Expr.PayVal,Expr.CurncyCode,Expr.Person,Acptr,Acptrw);
            case "IntORVc": 
              CreateAcceptanceAlert("IntORVc",IntORr.SerNr,IntORr.OurUser,IntORr.Total,"",IntORr.OurUser,Acptr,Acptrw);
          end;
          goto LCreateNextLevelAcceptanceTasks;
        end;
      end;
LNextLevelAcceptance:;              
    end;
  end;
LCreateNextLevelAcceptanceTasks:;  
  if (res==false) then begin
    switch (ActSeqr.SetPerson) begin
      case kActSeqSetPersonOriginatingRecord:
        newActr.MainPersons = mainpersons;
    end;        
  end;
  CreateNextLevelAcceptanceTasks = res;
  return;
end;

	*/

global
updating procedure CreateConsequences(record ActVc Actp)
begin
  record ActSeqVc ActSeqr;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  record ActVc newActr;
  record ActVc Act2r;
  row ActVc Actrw;
  record ResVc Resr;
  record ResVc oldResr;
  Boolean foundf;
  LongInt minutes;
  LongInt days,temp;
  record ActTypeVc ActTyper;
  string 255 frrlink,torlink,warning;
  record RLinkVc rlr;// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 03 12 2019 y. at 5:12:11 PM
  record ActTypeGrVc ActTypeGrr;
  Boolean Vws,testf;
  Boolean res,consactstored;
  Integer resi;
  Integer pos;
  Integer i,rwcnt;
  string 255 ostr;
  Time t;
  Boolean dummyf;
  transaction string 255 gAlarmVcSender;// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 03 12 2019 y. at 5:10:39 PM
  
  if (Actp.Invalid==0) then begin
    consactstored = false;
    ActSeqr.ActType = Actp.ActType;
    ActSeqr.ActResult = Actp.ActResult;
    foundf = false;
    if (ReadFirstMain(ActSeqr,2,true)) then begin
      foundf = true;
      if (ActSeqr.ActType!=Actp.ActType) then begin foundf = false; end;
      if (ActSeqr.ActResult!=Actp.ActResult) then begin foundf = false; end;
    end;
    if (foundf) then begin
      if (nonblank(ActSeqr.NextType)) then begin
        RecordNew(newActr);
        if (CreateNextLevelApprovalTasks(Actp,ActSeqr,newActr)) then begin
          goto LNextLevelAcceptanceTasksCreated;
        end;

        newActr.CUCode = Actp.CUCode;
        newActr.StartTime = Actp.StartTime;
        newActr.CostTime = Actp.CostTime;
        minutes = ActSeqr.NrOfHours * 60;
        days = AddTime(Actp.StartTime,minutes,t);
        newActr.StartTime = t;
        temp = AddTime(Actp.EndTime,minutes,t);
        newActr.EndTime = t;
        if (ActSeqr.NrOfDays<0) then begin
          days = days + 0;
        end else begin
          days = days + ActSeqr.NrOfDays;
        end;
        newActr.TransDate = AddDay(Actp.TransDate,days);
        newActr.EndDate = AddDay(Actp.EndDate,days);
        switch (ActSeqr.SetPerson) begin
          case kActSeqSetPersonOriginatingRecord:
            if (blank(newActr.MainPersons)) then begin
              if (nonblank(ActSeqr.Person)) then begin
                newActr.MainPersons = ActSeqr.Person;
              end else begin
                newActr.MainPersons = Actp.MainPersons;
              end;
            end;
          otherwise
            if (nonblank(ActSeqr.Person)) then begin
              newActr.MainPersons = ActSeqr.Person;
            end else begin
              newActr.MainPersons = Actp.MainPersons;
            end;
        end;
        gAlarmVcSender = Actp.MainPersons;// Edit ************************** Wednesday, 17 October 2012 13:24:28
        newActr.Contact = Actp.Contact;
        if (blank(newActr.ActType)) then begin
          newActr.ActType = ActSeqr.NextType;
        end;
        if (blank(ActSeqr.NextComment)) then begin
          newActr.Comment = Actp.Comment;
        end else begin
          newActr.Comment = ActSeqr.NextComment & " " & Actp.Comment;// Edit ************************** Tuesday, 16 October 2012 17:56:37
        end;
        newActr.TodoFlag = ActSeqr.TodoFlag;
        newActr.AlarmType = ActSeqr.AlarmType;
        newActr.AlarmWhen = ActSeqr.AlarmWhen;
        newActr.AlarmUnits = ActSeqr.AlarmUnits;
        newActr.PrioLevel = ActSeqr.PrioLevel;
        newActr.SymbNr = ActSeqr.SymbNr;

        newActr.OKFlag = 0;
//        newActr.SymbNr = 3;
        newActr.FromFileName = Actp.FromFileName;// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 03 12 2019 y. at 5:11:07 PM
        newActr.FromSerNr = Actp.FromSerNr;// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 03 12 2019 y. at 5:11:10 PM
        newActr.CUName = Actp.CUName;
        newActr.Phone = Actp.Phone;
        newActr.CCPersons = Actp.CCPersons;
        newActr.CalTimeFlag = Actp.CalTimeFlag;
        newActr.PrivateFlag = Actp.PrivateFlag;
        newActr.Phone = Actp.Phone;
        newActr.ItemCode = Actp.ItemCode;
        newActr.PRCode = Actp.PRCode;
        newActr.LangCode = Actp.LangCode;
        newActr.UserStr1 = Actp.UserStr1;
        newActr.UserStr2 = Actp.UserStr2;
        newActr.UserStr3 = Actp.UserStr3;
        newActr.UserStr4 = Actp.UserStr4;
        newActr.UserStr5 = Actp.UserStr5;
        newActr.UserDate1 = Actp.UserDate1;
        newActr.UserDate2 = Actp.UserDate2;
        newActr.UserDate3 = Actp.UserDate3;
        newActr.UserVal1 = Actp.UserVal1;
        newActr.UserVal2 = Actp.UserVal2;
        newActr.UserVal3 = Actp.UserVal3;
        ActTyper.Code = newActr.ActType;
        if (ReadFirstMain(ActTyper,1,true)) then begin
          newActr.ItemCode = ActTyper.ItemCode;
          ActTypeGrr.Code = ActTyper.ActTypeGr;
          if (ReadFirstMain(ActTypeGrr,1,true)) then begin
            newActr.CalTimeFlag = ActTypeGrr.DefTimeFlag;
          end;
        end;
        newActr.SVOSerNr = Actp.SVOSerNr;
        newActr.SerialNr = Actp.SerialNr;
        newActr.ArtCode = Actp.ArtCode;
        if (nonblank(Actp.ItemCode)) then begin
          newActr.ItemCode = Actp.ItemCode;
        end;
        newActr.Resources = Actp.Resources;
        newActr.Supervisor = Actp.Supervisor;
        newActr.ActResult = "";
        newActr.Invalid = 0;
        rwcnt = MatRowCnt(Actp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Actp,i,Actrw);
          MatRowPut(newActr,i,Actrw);
        end;
        newActr.SerNr = NextSerNr("ActVc",newActr.TransDate,-1,false,"");
        RecordCopy(Act2r,newActr);
        if (ReadFirstMain(Act2r,1,true)==false) then begin
          consactstored = RecordStore(newActr,false);
          if (ActSeqr.CopyRLink==1) then begin
            CopyRecordLinks(Actp,newActr);
          end;
          CreateRecordLink(newActr,CurrentCompany,Actp,CurrentCompany);  
          CreateRecordLink(Actp,CurrentCompany,newActr,CurrentCompany);  
        end;
      end;
      if (nonblank(ActSeqr.NewResState)) then begin
        pos = 0;
        ExtractObj(Actp.Resources,pos,ostr);
        while (nonblank(ostr)) begin
          Resr.Code = ostr;
          if (ReadFirstMain(Resr,1,true)) then begin
            RecordCopy(oldResr,Resr);
            Resr.ResStatus = ActSeqr.NewResState;
            resi = RecordUpdate(oldResr,Resr,false);
          end;
          ExtractObj(Actp.Resources,pos,ostr);
        end;
      end;
      if (ActSeqr.CreateVc==1) then begin
        if ((nonblank(Actp.SerialNr)) and (nonblank(Actp.ArtCode))) then begin
          RecordNew(SVOr);
          ClearRow(SVOr,SVOrw,1);
          i = 0;
          SVOrw.ArtCode = Actp.ArtCode;
          SVOrw.Quant = 1;
          SVOrw.SerialNr = Actp.SerialNr;
          MatRowPut(SVOr,i,SVOrw);
          if (PasteItemInSVO(SVOr,i)) then begin end;
          if (SVO_PasterSerialNr(SVOr,i,warning)) then begin end;
          if (blank(SVOr.CustCode)) then begin
            SVOr.CustCode = Actp.CUCode;
            if (PasteCUInSVO(SVOr,"",warning)) then begin
            end;
          end;
          SVOr.LangCode = Actp.LangCode;
          SVOr.Comment1 = Actp.Comment;
          SVOr.CustContact = Actp.Contact;
          rwcnt = MatRowCnt(Actp);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Actp,i,Actrw);
            switch(i) begin
              case 0:
                SVOr.Comment2 = Actrw.Text;
              case 1:
                SVOr.Comment3 = Actrw.Text;
              case 2:
                SVOr.Comment4 = Actrw.Text;
              otherwise
                i = rwcnt;
            end;
          end;
          SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");
          res = RecordStore(SVOr,false);
          if (ActSeqr.CopyRLink==1) then begin
            CopyRecordLinks(Actp,SVOr);
          end;
          CreateRecordLink(SVOr,CurrentCompany,Actp,CurrentCompany);
          CreateRecordLink(Actp,CurrentCompany,SVOr,CurrentCompany);
          if (consactstored) then begin
            CreateRecordLink(SVOr,CurrentCompany,newActr,CurrentCompany);
            CreateRecordLink(newActr,CurrentCompany,SVOr,CurrentCompany);
          end;
          if (Actp.SVOSerNr<=0) then begin
            Actp.SVOSerNr = SVOr.SerNr;
            newActr.SVOSerNr = SVOr.SerNr;
            consactstored = RecordStore(newActr,true);
          end;
        end;
      end;
LNextLevelAcceptanceTasksCreated:;        
    end;
  end;
  return;
end;

/* What if you change the user or the Item, it needs to rebuild the Object string... */
/* That is why I did this silly function that is called after each change */
global
procedure PasteTSObjects(string EMCode,string PRCode,string ArtCode,record UserVc USp,Boolean havecust,record INVc INp,Boolean haveitem,var string Objects)
begin
  record UserVc USr;
  record INVc INr;
  record PRVc PRr;
  string 200 tstr;
  
  Objects = "";
  tstr = "";
  if (nonblank(ArtCode)) then begin
    if (haveitem) then begin
      tstr = ArtCode;
      if (GetFirstItem(tstr,INr)) then begin
        Objects = FindINObjects(INr.Objects,INr.Group);
      end;
    end else begin
      Objects = FindINObjects(INp.Objects,INp.Group);
    end;
  end;
  if (nonblank(EMCode)) then begin
    if (havecust) then begin
      USr.Code = EMCode;
      if (ReadFirstMain(USr,1,true)) then begin
        tstr = USr.PersObjx;
      end;
    end else begin
      tstr = USp.PersObjx;
    end;
  end;
  if (nonblank(tstr)) then begin
    if (nonblank(Objects)) then begin
      Objects = Objects & ",";
    end;
    Objects = Objects & tstr;
  end;
  tstr = "";
  if (nonblank(PRCode)) then begin
    PRr.Code = PRCode;
    if (ReadFirstMain(PRr,1,true)) then begin
      tstr = PRr.Objects;
    end;
    if (nonblank(tstr)) then begin
      if (nonblank(Objects)) then begin
        Objects = Objects & ",";
      end;
      Objects = Objects & tstr;
    end;
  end;
  return;
end;

global
procedure TBIVAddPrice_Activity(record PRVc PRr,record TBIVVc TBIVp,string timeclass)
begin
  val pr,disc,t,princur;
  string 200 mark,markincur,tstr;
  record GeneralOptionBlock GenOptr;
  Integer oldstyle,typofcur;  
  
  BlockLoad(GenOptr);
  typofcur = TypeOfCurncy(PRr.CurncyCode,oldstyle);
  TBIVGetRate(TBIVp);    
  GetProjectPrice(TBIVp.PRCode,TBIVp.ArtCode,TBIVp.EMCode,timeclass,PRr.CurncyCode,1,pr,disc,mark,princur,markincur);
  TBIVp.Discount = disc;
  if (princur!=0) then begin//assumption pr is blank
    TBIVp.PriceInCur = princur;
    TBIVp.MarkupInCur = markincur;        
    CalcSum(TBIVp.InvQty,TBIVp.PriceInCur,0,TBIVp.Discount,princur,GenOptr.UseDiscount);
    TBIVp.SumInCur = princur;
    CalcExtra(TBIVp.SumInCur,TBIVp.MarkupInCur,princur);
    TBIVp.SumInCur = TBIVp.SumInCur + princur;
    tstr = "";
    pr = BlankVal;
    GetPRItemCost(TBIVp.PRCode,TBIVp.EMCode,TBIVp.ArtCode,timeclass,TBIVp.ItemType,pr);
    TBIVp.CostPrice = pr;
    Base1ToOther(TBIVp.CurncyCode,TBIVp.CostPrice,TBIVp.FrRate,TBIVp.ToRateB1,TBIVp.ToRateB2,TBIVp.BaseRate1,TBIVp.BaseRate2,TBIVp.CostPriceInCur,DefaultCurRoundOff);
    TBIVp.GPInCur = TBIVp.CostPriceInCur * TBIVp.Qty;
    TBIVp.GPInCur = TBIVp.SumInCur - TBIVp.GPInCur;    
    
    TBIVp.GP = MulRateToBase1(TBIVp.CurncyCode,TBIVp.GPInCur,TBIVp.FrRate,TBIVp.ToRateB1,TBIVp.ToRateB2,TBIVp.BaseRate1,TBIVp.BaseRate2,DefaultCurRoundOff);    
    TBIVp.Sum = MulRateToBase1(TBIVp.CurncyCode,TBIVp.SumInCur,TBIVp.FrRate,TBIVp.ToRateB1,TBIVp.ToRateB2,TBIVp.BaseRate1,TBIVp.BaseRate2,DefaultCurRoundOff);    
    TBIVp.Price = MulRateToBase1(TBIVp.CurncyCode,TBIVp.PriceInCur,TBIVp.FrRate,TBIVp.ToRateB1,TBIVp.ToRateB2,TBIVp.BaseRate1,TBIVp.BaseRate2,DefaultCurRoundOff);    
    t = StringToVal(TBIVp.MarkupInCur,M4Val);
    if (Mid(TBIVp.MarkupInCur,len(TBIVp.MarkupInCur)-1,1)!="%") then begin
      t = MulRateToBase1(TBIVp.CurncyCode,t,TBIVp.FrRate,TBIVp.ToRateB1,TBIVp.ToRateB2,TBIVp.BaseRate1,TBIVp.BaseRate2,DefaultCurRoundOff);    
    end;
    TBIVp.Markup = t;
  end else begin
    TBIVp.Price = pr;
    TBIVp.Markup = mark;        
    CalcSum(TBIVp.InvQty,TBIVp.Price,0,TBIVp.Discount,pr,GenOptr.UseDiscount);
    TBIVp.Sum = pr;
    CalcExtra(TBIVp.Sum,TBIVp.Markup,pr);
    TBIVp.Sum = TBIVp.Sum + pr;
    TBIVp.GP = blankval;
    TBIVp.CostPrice = BlankVal;
    tstr = "";
    pr = BlankVal;
    GetPRItemCost(TBIVp.PRCode,TBIVp.EMCode,TBIVp.ArtCode,timeclass,TBIVp.ItemType,pr);
    TBIVp.CostPrice = pr;
    TBIVp.GP = TBIVp.CostPrice * TBIVp.Qty;
    TBIVp.GP = TBIVp.Sum - TBIVp.GP;
    if (typofcur!=1) then begin
      TBIVCalcInCurValues(TBIVp);
    end;     
  end;
  return;
end;
    
updating procedure ActCreateTBIV(record ActVc Actp)
begin
  record TBIVVc TBIVp;
  record INVc INr;
  record UserVc USr;
  string 200 tstr;
  Integer i,j;
  Date bldat;
  Boolean res;
  record PRVc PRr;
  Integer oldstyle,typofcur;  
  val t,princur;
  
  if (nonblank(Actp.MainPersons)) then begin
    RecordNew(TBIVp);
    TBIVp.oVc = 5;
    TBIVp.SerNr = Actp.SerNr;
    TBIVp.Row = -1;
    TBIVp.TransDate = Actp.TransDate;
    TBIVp.EMCode = Actp.MainPersons;
    TBIVp.PRCode = Actp.PRCode;
    PRr.Code = TBIVp.PRCode;
    ReadFirstMain(PRr,1,true);
    TBIVp.PRName = PRr.Name;
    TBIVp.ArtCode = Actp.ItemCode;
    if (GetItemTypeGroup(TBIVp.ArtCode,tstr)==0) then begin end;
    TBIVp.INGroup = tstr;
    TBIVp.ItemType = 3; //##
    INr.Code = TBIVp.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.ItemType==3) then begin
        TBIVp.ItemType = 3;
      end else begin
        if (INr.ItemMaterial!=0) then begin
          TBIVp.ItemType = 5;
        end else begin
          TBIVp.ItemType = 0;
        end;
      end;
    end;
    tstr = TBIVp.Objects;
    PasteTSObjects(Actp.MainPersons,Actp.PRCode,Actp.ItemCode,USr,false,INr,false,tstr);
    TBIVp.Objects = tstr;
    TBIVp.Qty = TimeToVal(Actp.CostTime);
    TBIVp.Comment = Actp.Comment;
    GetPRInvSep(Actp.PRCode,i,j);
    TBIVp.InvSeparately = i;
    TBIVp.InvQty = TBIVp.Qty;
    TBIVp.Invoice = -1;
    TBIVp.InvDate = bldat;
    TBIVp.InvAfter = bldat;
    tstr = "";
    typofcur = TypeOfCurncy(PRr.CurncyCode,oldstyle);
    TBIVp.CurncyCode = PRr.CurncyCode;
    TBIVAddPrice_Activity(PRr,TBIVp,Actp.TimeClass);
    res = RecordStore(TBIVp,false);
  end;
  return;
end;

updating procedure ActCreateWSIV(record ActVc Actp)
begin
  record WSIVVc WSIVp;
  record WSIVVc WSIVr;
  record CUVc CUr;
  record INVc INr;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  val t,s,rowsum,price,vreb,baseprice,tax2prc;
  Boolean calcpricef,dummyf;
  Boolean found;
  val cost;
  Time blankt;
  
  CUr.Code = Actp.CUCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordNew(CUr);
  end;
  if (nonblank(Actp.MainPersons)) then begin
    RecordNew(WSIVp);
    WSIVp.Type = GetItemType(Actp.SVOSerNr,-1,Actp.SerialNr,0);
    if (WSIVp.Type == 0) then begin // Why?
      WSIVp.Type = 1;
    end;
    WSIVp.Row = -1;
    WSIVp.SerNr = Actp.SerNr;
    WSIVp.RecType = 1;
    WSIVp.SVONr = Actp.SVOSerNr;
    WSIVp.ContractNr = -1; //##
    WSIVp.TransDate = Actp.TransDate;
    WSIVp.MotherNr = Actp.SerialNr;
    WSIVp.SerialNr = "";
    WSIVp.InvoiceTo = CUr.InvoiceToCode;
    WSIVp.WONr = -1;
    WSIVp.EMCode = FirstInRange(Actp.MainPersons,10);
    WSIVp.CUCode = Actp.CUCode;
    WSIVp.ArtCode = Actp.ItemCode;
    WSIVp.UsedQty = TimeToVal(Actp.CostTime);
    WSIVp.InvQty = TimeToVal(Actp.CostTime);
    if (GetItemPriceDiscount3(WSIVp.ArtCode,WSIVp.InvQty,INr,WSIVp.CurncyCode,
                            WSIVp.FrRate,WSIVp.ToRateB1,WSIVp.ToRateB2,WSIVp.BaseRate1,WSIVp.BaseRate2,
                            "",CUr.CustCat,CUr.PLCode,CUr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            CUr.ExportFlag,calcpricef,WSIVp.TransDate,blankt,WSIVp.CUCode,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
      WSIVp.Coefficient = INr.UnitCoefficient;
      WSIVp.Price = price;
      WSIVp.Discount = vreb;
      WSIVp.Sum = baseprice;
    end;
    WSIVp.Comment = Actp.Comment;
    WSIVp.InvNr = -1;
    WSIVp.GP = blankval;
    WSIVp.CostPrice = blankval;
    WSIVp.Sum = WSIVp.Price * WSIVp.InvQty; // Is this correct?
    WSIVp.ItemType = GetItemCost(WSIVp.EMCode,WSIVp.ArtCode,"",WSIVp.InvQty,BlankVal,cost);
    WSIVp.CostPrice = cost;
    t = WSIVp.CostPrice*WSIVp.InvQty;
    WSIVp.GP = WSIVp.Sum - t;
    RecordCopy(WSIVr,WSIVp);
    if (ReadFirstMain(WSIVr,0,true)==false) then begin
      if (RecordStore(WSIVp,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure CreateAlarm(record ActVc Actr)
begin
  record AlarmVc Alarmr;
  Integer pos;
  string 255 user;
  Integer days,hours;
  transaction string 255 gAlarmVcSender;
  transaction string 255 gAlarmVcStdTxt;
  record ActTypeVc ATr;
  
  if (Actr.AlarmType!=0) then begin
    ATr.Code = Actr.ActType;
    ReadFirstMain(ATr,1,true);
    if (ATr.AlarmToCCPersons==0) then begin
      pos = 0;
      ExtractObj(Actr.MainPersons,pos,user);
      while (nonblank(user)) begin
        RecordNew(Alarmr);
        Alarmr.MainPersons = user;
    //    Alarmr.CCPersons = Actr.CCPersons;
        Alarmr.LTxtCode = "";
        Alarmr.Comment = Actr.Comment;
        Alarmr.OKFlag = 0;
        Alarmr.AlarmType = Actr.AlarmType;
        Alarmr.TransDate = Actr.TransDate;
        Alarmr.TransTime = Actr.StartTime;
        Alarmr.ActSerNr = Actr.SerNr;
        Alarmr.CompNo = CurrentCompany;
        Alarmr.Sender = gAlarmVcSender;
        Alarmr.StdTxt = gAlarmVcStdTxt;
        switch (Actr.AlarmWhen) begin
          case 0: 
            hours = Actr.AlarmUnits/60;
            days = Actr.AlarmUnits/(60*24);
            if (nonblanktime(Actr.StartTime)) then begin
              if (TimeToMinutes(Actr.StartTime)<(Actr.AlarmUnits-days*24*60)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,-days);
            Alarmr.TransTime = AddMinutes(Alarmr.TransTime,-(Actr.AlarmUnits-days*60*24));
          case 1:
            days = Actr.AlarmUnits/24;
            if (nonblanktime(Actr.StartTime)) then begin
              if (GetHour(Actr.StartTime)<(Actr.AlarmUnits-days*24)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,-days);
            Alarmr.TransTime = AddHours(Alarmr.TransTime,-(Actr.AlarmUnits-days*24));
          case 2: 
            Alarmr.TransDate = AddDay(Alarmr.TransDate,-Actr.AlarmUnits);
          case 3: 
            hours = Actr.AlarmUnits/60;
            days = Actr.AlarmUnits/(60*24);
            if (nonblanktime(Actr.StartTime)) then begin
              if (TimeToMinutes(Actr.StartTime)<(Actr.AlarmUnits+days*24*60)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,days);
            Alarmr.TransTime = AddMinutes(Alarmr.TransTime,(Actr.AlarmUnits-days*60*24));
          case 4:
            days = Actr.AlarmUnits/24;
            if (nonblanktime(Actr.StartTime)) then begin
              if (GetHour(Actr.StartTime)<(Actr.AlarmUnits+days*24)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,days);
            Alarmr.TransTime = AddHours(Alarmr.TransTime,(Actr.AlarmUnits-days*24));
          case 5: 
            Alarmr.TransDate = AddDay(Alarmr.TransDate,Actr.AlarmUnits);
        end;
        Alarmr.SerNr = NextSerNr("AlarmVc",Alarmr.TransDate,-1,false,"");
        if (Alarmr.SerNr>0) then begin
          if (RecordStore(Alarmr,false)) then begin end;
        end;
        ExtractObj(Actr.MainPersons,pos,user);
      end;
    end;
    if (ATr.AlarmToCCPersons==1) then begin
      pos = 0;
      ExtractObj(Actr.CCPersons,pos,user);
      while (nonblank(user)) begin
        RecordNew(Alarmr);
        Alarmr.MainPersons = user;
//        Alarmr.CCPersons = Actr.CCPersons;
        Alarmr.LTxtCode = "";
        Alarmr.Comment = Actr.Comment;
        Alarmr.OKFlag = 0;
        Alarmr.AlarmType = Actr.AlarmType;
        Alarmr.TransDate = Actr.TransDate;
        Alarmr.TransTime = Actr.StartTime;
        Alarmr.ActSerNr = Actr.SerNr;
        Alarmr.CompNo = CurrentCompany;
        switch (Actr.AlarmWhen) begin
          case 0: 
            hours = Actr.AlarmUnits/60;
            days = Actr.AlarmUnits/(60*24);
            if (nonblanktime(Actr.StartTime)) then begin
              if (TimeToMinutes(Actr.StartTime)<(Actr.AlarmUnits-days*24*60)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,-days);
            Alarmr.TransTime = AddTime3(Alarmr.TransTime,-(Actr.AlarmUnits-days*60*24)); //Alarmr.TransTime = AddMinutes(Alarmr.TransTime,-(Actr.AlarmUnits-days*60*24));        
          case 1:
            days = Actr.AlarmUnits/24;
            if (nonblanktime(Actr.StartTime)) then begin
              if (GetHour(Actr.StartTime)<(Actr.AlarmUnits-days*24)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,-days);
            Alarmr.TransTime = AddHours(Alarmr.TransTime,-(Actr.AlarmUnits-days*24));        
          case 2: 
            Alarmr.TransDate = AddDay(Alarmr.TransDate,-Actr.AlarmUnits);
          case 3: 
            hours = Actr.AlarmUnits/60;
            days = Actr.AlarmUnits/(60*24);
            if (nonblanktime(Actr.StartTime)) then begin
              if (TimeToMinutes(Actr.StartTime)<(Actr.AlarmUnits+days*24*60)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,days);
            Alarmr.TransTime = AddTime3(Alarmr.TransTime,(Actr.AlarmUnits-days*60*24));        //Alarmr.TransTime = AddMinutes(Alarmr.TransTime,(Actr.AlarmUnits-days*60*24));        
          case 4:
            days = Actr.AlarmUnits/24;
            if (nonblanktime(Actr.StartTime)) then begin
              if (GetHour(Actr.StartTime)<(Actr.AlarmUnits+days*24)) then begin
                days = days + 1;
              end;
            end;
            Alarmr.TransDate = AddDay(Alarmr.TransDate,days);
            Alarmr.TransTime = AddHours(Alarmr.TransTime,(Actr.AlarmUnits-days*24));        
          case 5: 
            Alarmr.TransDate = AddDay(Alarmr.TransDate,Actr.AlarmUnits);
        end;
        Alarmr.SerNr = NextSerNr("AlarmVc",Alarmr.TransDate,-1,false,"");
        if (Alarmr.SerNr>0) then begin
          if (RecordStore(Alarmr,false)) then begin end;
        end;
        ExtractObj(Actr.CCPersons,pos,user);
      end;
    end;
  end;
  return;
end;

global
updating procedure DeleteAlarm(record ActVc Actr)
begin
  record AlarmVc Alarmr;
  record AlarmVc oldAlarmr;
  Boolean found,deletef;
  record RestSetupVc RSr;
  record KitchenOrderVc KOr;
  
  deletef = true;
  switch (Actr.FromFileName) begin
    case "KitchenOrderVc":
      KOr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(KOr,1,true)) then begin
        RSr.BranchID = KOr.BranchID;
        if (ReadFirstMain(RSr,1,true)) then begin
          if (TimeDiffInSeconds(Actr.StartTime,Actr.EndTime)>TimeToSeconds2(RSr.KitchenOrderMaxTime)) then begin
            deletef = false;
          end;
        end;
      end;
  end;
  if (deletef) then begin
    Alarmr.ActSerNr = Actr.SerNr;
    Alarmr.OKFlag = 0;
    found = true;
    while (LoopKey("ActSerNr",Alarmr,2,found)) begin    
      if (Alarmr.ActSerNr!=Actr.SerNr) then begin found = false; end;
      if (Alarmr.OKFlag!=0) then begin found = false; end;    
      if (found) then begin
        RecordDelete(Alarmr);
        StepBack(Alarmr);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateAlarm(record ActVc Actr)
begin
  DeleteAlarm(Actr);
  CreateAlarm(Actr);
  return;
end;

global
updating procedure ActOK(record ActVc Actp)
begin
  if (Actp.OKFlag!=0) then begin
    if (Actp.Invalid==0) then begin
      if (Actp.CalTimeFlag==1) then begin
        if (GenActProjTrans(Actp.ActType)) then begin
          ActCreateTBIV(Actp);
          UpdateActPErs(Actp);
        end;
        if (GenActWSTrans(Actp.ActType)) then begin
          ActCreateWSIV(Actp);
        end;
      end;
      if (Actp.TodoFlag==kTodoFlagApproval) then begin
        SetLinkedRecordApprovalStatus(Actp);
      end;
      OKLinkedRecord_ActVc(Actp);
    end;
  end;
  return;
end;

